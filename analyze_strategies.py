#!/usr/bin/env python3\n\"\"\"\n–¢–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n\"\"\"\n\nimport json\nimport sys\nfrom pathlib import Path\nfrom datetime import datetime\nfrom typing import Dict, List\n\ndef load_strategy_data(data_file: str = \"strategy_performance.json\") -> Dict:\n    \"\"\"–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ —Ñ–∞–π–ª–∞\"\"\"\n    data_path = Path(data_file)\n    \n    if not data_path.exists():\n        print(f\"‚ùå –§–∞–π–ª {data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!\")\n        print(\"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ.\")\n        return {}\n    \n    try:\n        with open(data_path, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n            return data.get('strategy_performance', {})\n    except Exception as e:\n        print(f\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}\")\n        return {}\n\ndef print_summary_report(strategy_data: Dict):\n    \"\"\"–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\"\"\"\n    print(\"\\n\" + \"=\"*60)\n    print(\"üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –°–¢–†–ê–¢–ï–ì–ò–Ø–ú\")\n    print(\"=\"*60)\n    \n    if not strategy_data:\n        print(\"üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è\")\n        return\n    \n    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –æ–±—â–µ–º—É PnL\n    sorted_strategies = sorted(\n        strategy_data.items(),\n        key=lambda x: x[1].get('total_pnl', 0),\n        reverse=True\n    )\n    \n    print(f\"{'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<15} | {'–°–¥–µ–ª–∫–∏':<8} | {'Win%':<6} | {'PnL':<12} | {'Avg PnL':<8} | {'Sharpe':<6}\")\n    print(\"-\" * 70)\n    \n    total_trades = 0\n    total_wins = 0\n    total_pnl = 0.0\n    \n    for name, perf in sorted_strategies:\n        trades = perf.get('total_trades', 0)\n        wins = perf.get('winning_trades', 0)\n        pnl = perf.get('total_pnl', 0.0)\n        sharpe = perf.get('sharpe_ratio', 0.0)\n        \n        if trades > 0:\n            win_rate = (wins / trades) * 100\n            avg_pnl = pnl / trades\n            print(f\"{name:<15} | {wins:>2}/{trades:<4} | {win_rate:>5.1f}% | ${pnl:>10.2f} | ${avg_pnl:>6.2f} | {sharpe:>5.2f}\")\n            \n            total_trades += trades\n            total_wins += wins\n            total_pnl += pnl\n        else:\n            print(f\"{name:<15} | {'0/0':<7} | {'N/A':<6} | {'$0.00':<12} | {'N/A':<8} | {'N/A':<6}\")\n    \n    print(\"-\" * 70)\n    if total_trades > 0:\n        overall_win_rate = (total_wins / total_trades) * 100\n        overall_avg_pnl = total_pnl / total_trades\n        print(f\"{'–ò–¢–û–ì–û':<15} | {total_wins:>2}/{total_trades:<4} | {overall_win_rate:>5.1f}% | ${total_pnl:>10.2f} | ${overall_avg_pnl:>6.2f} | {'‚Äî':<6}\")\n\ndef print_detailed_report(strategy_data: Dict, strategy_name: str = None):\n    \"\"\"–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ –≤—Å–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\"\"\"\n    if strategy_name:\n        if strategy_name not in strategy_data:\n            print(f\"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\")\n            print(f\"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {', '.join(strategy_data.keys())}\")\n            return\n        strategies_to_show = {strategy_name: strategy_data[strategy_name]}\n    else:\n        strategies_to_show = strategy_data\n    \n    for name, perf in strategies_to_show.items():\n        print(f\"\\nüéØ –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: {name.upper()}\")\n        print(\"=\"*50)\n        \n        trades = perf.get('total_trades', 0)\n        wins = perf.get('winning_trades', 0)\n        losses = perf.get('losing_trades', 0)\n        pnl = perf.get('total_pnl', 0.0)\n        avg_duration = perf.get('avg_trade_duration', 0.0)\n        max_drawdown = perf.get('max_drawdown', 0.0)\n        sharpe = perf.get('sharpe_ratio', 0.0)\n        vol_pref = perf.get('volatility_preference', 1.0)\n        trend_pref = perf.get('trend_preference', 1.0)\n        \n        print(f\"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\")\n        print(f\"   ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {trades}\")\n        print(f\"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {wins} ({(wins/trades*100) if trades > 0 else 0:.1f}%)\")\n        print(f\"   ‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losses} ({(losses/trades*100) if trades > 0 else 0:.1f}%)\")\n        print(f\"   ‚Ä¢ –û–±—â–∏–π PnL: ${pnl:.2f}\")\n        print(f\"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL –∑–∞ —Å–¥–µ–ª–∫—É: ${(pnl/trades) if trades > 0 else 0:.2f}\")\n        print(f\"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.1f} –º–∏–Ω\")\n        print(f\"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}%\")\n        print(f\"   ‚Ä¢ Sharpe ratio: {sharpe:.3f}\")\n        \n        print(f\"\\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\")\n        print(f\"   ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {vol_pref:.1f}\")\n        print(f\"   ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞: {trend_pref:.1f}\")\n        \n        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏\n        recent_trades = perf.get('last_10_trades', [])\n        if recent_trades:\n            print(f\"\\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {min(len(recent_trades), 5)} —Å–¥–µ–ª–æ–∫:\")\n            for i, trade in enumerate(recent_trades[-5:], 1):\n                success = \"‚úÖ\" if trade.get('success', False) else \"‚ùå\"\n                pnl_trade = trade.get('pnl', 0)\n                duration = trade.get('duration', 0)\n                timestamp = trade.get('timestamp', '')\n                if isinstance(timestamp, str):\n                    try:\n                        timestamp = datetime.fromisoformat(timestamp).strftime('%Y-%m-%d %H:%M')\n                    except:\n                        timestamp = timestamp[:16] if len(timestamp) > 16 else timestamp\n                print(f\"   {i}. {success} ${pnl_trade:+.2f} ({duration}–º–∏–Ω) - {timestamp}\")\n\ndef export_to_csv(strategy_data: Dict, output_file: str = \"strategy_report.csv\"):\n    \"\"\"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ Excel\"\"\"\n    try:\n        import csv\n        \n        with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:\n            fieldnames = [\n                'strategy', 'total_trades', 'winning_trades', 'losing_trades',\n                'win_rate', 'total_pnl', 'avg_pnl_per_trade', 'avg_duration',\n                'max_drawdown', 'sharpe_ratio', 'volatility_preference', 'trend_preference'\n            ]\n            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n            \n            writer.writeheader()\n            \n            for name, perf in strategy_data.items():\n                trades = perf.get('total_trades', 0)\n                wins = perf.get('winning_trades', 0)\n                \n                row = {\n                    'strategy': name,\n                    'total_trades': trades,\n                    'winning_trades': wins,\n                    'losing_trades': perf.get('losing_trades', 0),\n                    'win_rate': (wins / trades * 100) if trades > 0 else 0,\n                    'total_pnl': perf.get('total_pnl', 0.0),\n                    'avg_pnl_per_trade': (perf.get('total_pnl', 0) / trades) if trades > 0 else 0,\n                    'avg_duration': perf.get('avg_trade_duration', 0.0),\n                    'max_drawdown': perf.get('max_drawdown', 0.0),\n                    'sharpe_ratio': perf.get('sharpe_ratio', 0.0),\n                    'volatility_preference': perf.get('volatility_preference', 1.0),\n                    'trend_preference': perf.get('trend_preference', 1.0)\n                }\n                writer.writerow(row)\n        \n        print(f\"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {output_file}\")\n    except Exception as e:\n        print(f\"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}\")\n\ndef main():\n    \"\"\"–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞\"\"\"\n    if len(sys.argv) < 2:\n        print(\"üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\")\n        print(\"\\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\")\n        print(f\"  {sys.argv[0]} summary                    - –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\")\n        print(f\"  {sys.argv[0]} details [strategy_name]   - –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\")\n        print(f\"  {sys.argv[0]} export [output.csv]       - –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV\")\n        print(f\"  {sys.argv[0]} best                      - –õ—É—á—à–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\")\n        print(\"\\n–ü—Ä–∏–º–µ—Ä—ã:\")\n        print(f\"  {sys.argv[0]} summary\")\n        print(f\"  {sys.argv[0]} details sma_crossover\")\n        print(f\"  {sys.argv[0]} export my_report.csv\")\n        return\n    \n    command = sys.argv[1].lower()\n    data_file = \"strategy_performance.json\"\n    \n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö\n    strategy_data = load_strategy_data(data_file)\n    if not strategy_data:\n        return\n    \n    if command == \"summary\":\n        print_summary_report(strategy_data)\n        \n    elif command == \"details\":\n        strategy_name = sys.argv[2] if len(sys.argv) > 2 else None\n        print_detailed_report(strategy_data, strategy_name)\n        \n    elif command == \"export\":\n        output_file = sys.argv[2] if len(sys.argv) > 2 else \"strategy_report.csv\"\n        export_to_csv(strategy_data, output_file)\n        \n    elif command == \"best\":\n        print(\"\\nüèÜ –õ–£–ß–®–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú\")\n        print(\"=\"*40)\n        \n        # –õ—É—á—à–∞—è –ø–æ PnL\n        best_pnl = max(strategy_data.items(), key=lambda x: x[1].get('total_pnl', 0))\n        print(f\"üí∞ –õ—É—á—à–∞—è –ø–æ –ø—Ä–∏–±—ã–ª–∏: {best_pnl[0]} (${best_pnl[1].get('total_pnl', 0):.2f})\")\n        \n        # –õ—É—á—à–∞—è –ø–æ win rate\n        strategies_with_trades = {k: v for k, v in strategy_data.items() if v.get('total_trades', 0) > 0}\n        if strategies_with_trades:\n            best_winrate = max(strategies_with_trades.items(), \n                             key=lambda x: x[1]['winning_trades'] / x[1]['total_trades'])\n            wr = (best_winrate[1]['winning_trades'] / best_winrate[1]['total_trades']) * 100\n            print(f\"üéØ –õ—É—á—à–∞—è –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É: {best_winrate[0]} ({wr:.1f}%)\")\n            \n            # –õ—É—á—à–∞—è –ø–æ Sharpe\n            best_sharpe = max(strategies_with_trades.items(), \n                            key=lambda x: x[1].get('sharpe_ratio', 0))\n            print(f\"üìà –õ—É—á—à–∞—è –ø–æ Sharpe: {best_sharpe[0]} ({best_sharpe[1].get('sharpe_ratio', 0):.3f})\")\n        \n        print_summary_report(strategy_data)\n        \n    else:\n        print(f\"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}\")\n        print(\"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: summary, details, export, best\")\n\nif __name__ == \"__main__\":\n    main()\n