#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot import PositionManager
from config import BybitConfig
from datetime import datetime

def test_position_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PositionManager"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PositionManager ===")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π
    pm = PositionManager(max_positions_per_symbol=3, max_risk_per_trade=2.0)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print(f"–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {pm.get_total_positions_count()}")
    print(f"  –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å BTCUSDT: {pm.can_open_position('BTCUSDT')}")
    
    # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
    print(f"\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π:")
    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
    
    for symbol in symbols:
        for i in range(3):  # –ü–æ 3 –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Å–∏–º–≤–æ–ª
            pm.add_position(
                symbol=symbol,
                side="Buy" if i % 2 == 0 else "Sell",
                amount=100,
                price=50000 + i * 1000,
                stop_loss=49000 + i * 1000,
                take_profit=51000 + i * 1000,
                strategy_used=f"strategy_{i}"
            )
    
    print(f"–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {pm.get_total_positions_count()}")
    
    for symbol in symbols:
        positions = pm.get_positions_for_symbol(symbol)
        print(f"  {symbol}: {len(positions)} –ø–æ–∑–∏—Ü–∏–π")
        for pos in positions:
            print(f"    ID: {pos['id']}, Side: {pos['side']}, Strategy: {pos['strategy_used']}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤:")
    for symbol in symbols:
        can_open = pm.can_open_position(symbol)
        print(f"  –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å {symbol}: {can_open}")
    
    # –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
    print(f"\n–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π:")
    
    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é BTCUSDT
    btc_positions = pm.get_positions_for_symbol("BTCUSDT")
    if btc_positions:
        first_position_id = btc_positions[0]['id']
        pm.remove_position("BTCUSDT", first_position_id)
        print(f"  –£–¥–∞–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è {first_position_id}")
    
    print(f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:")
    print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {pm.get_total_positions_count()}")
    print(f"  BTCUSDT –ø–æ–∑–∏—Ü–∏–π: {len(pm.get_positions_for_symbol('BTCUSDT'))}")
    print(f"  –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å BTCUSDT: {pm.can_open_position('BTCUSDT')}")
    
    # –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π (—Å–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã)
    print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:")
    
    triggered = pm.update_position("ETHUSDT", 50500)  # –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ TP –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    print(f"  Triggered positions: {triggered}")
    
    return True

def test_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        config = BybitConfig.from_env()
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
        print(f"  max_positions_per_symbol: {config.max_positions_per_symbol}")
        print(f"  max_total_positions: {config.max_total_positions}")
        print(f"  max_risk_per_trade: {config.max_risk_per_trade}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ functions.py"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ functions.py ===")
    
    try:
        from functions import limit_open_positions, apply_sl_tp_bounds
        
        # –¢–µ—Å—Ç limit_open_positions
        test_positions = {"BTCUSDT": {}, "ETHUSDT": {}}
        result1 = limit_open_positions(test_positions, 3)
        result2 = limit_open_positions(test_positions, 1)
        
        print(f"limit_open_positions:")
        print(f"  2 –ø–æ–∑–∏—Ü–∏–∏, –ª–∏–º–∏—Ç 3: {result1}")
        print(f"  2 –ø–æ–∑–∏—Ü–∏–∏, –ª–∏–º–∏—Ç 1: {result2}")
        
        # –¢–µ—Å—Ç apply_sl_tp_bounds
        price = 50000
        stop, take = apply_sl_tp_bounds(price, "Buy", 48000, 52000)
        print(f"apply_sl_tp_bounds (Buy):")
        print(f"  –¶–µ–Ω–∞: {price}, SL: {stop}, TP: {take}")
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è functions: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
    print("=" * 50)
    
    tests = [
        ("PositionManager", test_position_manager),
        ("Config", test_config),
        ("Functions", test_functions)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
            print(f"\n‚úÖ {test_name}: {'–ü–†–û–ô–î–ï–ù' if result else '–ü–†–û–í–ê–õ–ï–ù'}")
        except Exception as e:
            results.append((test_name, False))
            print(f"\n‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

if __name__ == "__main__":
    main()
